<?phprequire 'App/Conn/Conn.php';class Persistence extends Conn {    function __construct() {            }    #######################INICIO DO NOVO INSERIR ################    function insertNew($table, $dados) {        $dado = NULL;        $atrrib = NULL;        $values = NULL;        try {            $conn = new Conn();            $conn2 = $conn->getInstance();            $tabela = $table;            $fields = $this->schemas = $this->getColumns($tabela, $pullFk = TRUE);            foreach ($fields as $schema) {                $atrrib .= $schema['COLUMN_NAME'] . ',';            }            $atrrib = preg_replace('/(.*),[ )]*$/', '${1}', $atrrib);            $sql = "INSERT INTO $tabela ( $atrrib) VALUES (";            foreach ($dados as $dado) {                $values .= '"' . $dado . '",';            }            $values = preg_replace('/(.*),[ ]*$/', '${1}', $values);            $sql .= $values . ')';            //            if ($table === 'Consultas') {//                echo $sql;die();//            }                        $conn2->exec($sql);        } catch (PDOException $e) {            echo $sql . "<br>" . $e->getMessage();        }        $conn2 = null;    }################### FIM DO NOVO INSERIR ################################    #######################INICIO DO MULTIPLE ################    function insertMultiple($table, $dados) {        $dado = NULL;        $atrrib = NULL;        $values = NULL;        try {            $conn = new Conn();            $conn2 = $conn->getInstance();            $tabela = $table;            $fields = $this->schemas = $this->getColumns($tabela, $pullFk = TRUE);            foreach ($fields as $schema) {                $atrrib .= $schema['COLUMN_NAME'] . ',';            }            $atrrib = preg_replace('/(.*),[ )]*$/', '${1}', $atrrib);            $sql = "INSERT INTO $tabela ( $atrrib) VALUES (";            for ($i = 0; $i < count($dados); $i++) {                $values .= '"' . $dado . '",';            }            $values = preg_replace('/(.*),[ ]*$/', '${1}', $values);            $sql .= $values . ')';//            echo $sql;die();            $conn2->exec($sql);        } catch (PDOException $e) {            echo $sql . "<br>" . $e->getMessage();        }        $conn2 = null;    }################### FIM DO MULTIPLE ################################        function select($table, $condition, $extra = NULL, $fetch = PDO::FETCH_ASSOC, $fields = '*', $where = 'where') {        $sql = "SELECT $fields FROM $table $where $condition $extra";//        if ($table === 'Agenda') {//            echo $sql;die();//        }        try {            $database = new Conn();            $database->getInstance();            $query = $database->connect()->prepare($sql);            $query->execute();            $result = $query->fetchAll($fetch);            return $result;        } catch (PDOException $error) {            echo "Erro ao selecionar da tabela $table " . $sql;        }    }//FIM DO SELECIONAR    function selectCount($table, $condition) {        $sql = "SELECT count(*) FROM $table WHERE $condition";        try {            $database = new Conn();            $database->getInstance();            $query = $database->connect()->prepare($sql);            $query->execute();            $result = $query->fetchAll(PDO::FETCH_NUM);            return $result;        } catch (PDOException $error) {            echo "Erro ao selecionar da tabela $table" . $error->getMessage();        }    }    function selectEspecial($sql) {                                                        try {            $database = new Conn();            $database->getInstance();            $query = $database->connect()->prepare($sql);            $query->execute();            $result = $query->fetchAll(PDO::FETCH_NUM);            return $result;        } catch (PDOException $error) {            echo "Erro ao selecionar da tabela $table" . $error->getMessage();        }    }    function delete($table, $conditions) {        $sql = "DELETE FROM $table WHERE $conditions";        try {            $database = new Conn();            $database->getInstance();            $query = $database->connect()->prepare($sql);            $query->execute();            return true;        } catch (PDOException $error) {            return false;        }    }    function update($table, $values, $attrs, $condicion) {        $database = new Conn();        $database->getInstance();        $sql = "UPDATE $table SET $values = '$attrs' WHERE $condicion";                $query = $database->connect()->prepare($sql);        $query->execute();        return TRUE;    }    function getColumns($table, $pullFk = FALSE, $ignore = NULL) {        $sql = "SELECT  *                FROM INFORMATION_SCHEMA.COLUMNS                WHERE table_name = '$table'                AND  extra != 'auto_increment'                 AND data_type != 'timestamp'                 AND column_name NOT LIKE '%status%' ";        if (!$pullFk) {            $sql .= "AND COLUMN_KEY != 'MUL'";        }        if ($ignore !== NULL) {            $sql .= "AND column_name NOT LIKE '%$ignore%'";        }        $this->database = new Conn();        try {            $query = $this->database->connect()->prepare($sql);            $query->execute();            return $query->fetchAll(PDO::FETCH_ASSOC);        } catch (PDOException $error) {            echo 'ERRO ' . $error->getTraceAsString();        }    }    function lastInsertedId($columnId, $table) {        $sql = "SELECT MAX($columnId) FROM $table";        try {            $database = new Conn();            $database->getInstance();            $query = $database->connect()->prepare($sql);            $query->execute();            $result = $query->fetchAll();            return $result[0][0];        } catch (PDOException $error) {            echo "Erro ao selecionar o Ãºltimo ID da tabela $table" . $error->getMessage();        }    }}